/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

* {
  box-sizing: border-box;
  text-shadow: 0 1px 2px #000;
  -webkit-touch-callout: none;
  /* iOS Safari */
  -webkit-user-select: none;
  /* Safari */
  -khtml-user-select: none;
  /* Konqueror HTML */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* Internet Explorer/Edge */
  user-select: none;
  /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}

html,
body {
  background-color: #111;
  margin: 0;
  min-height: 100%;
  color: #fff;
  font-family: 'Open Sans', sans-serif;
  font-weight: 400;
  font-size: 16px;
  overflow: hidden;
}

html {
  position: relative;
}

header {
  position: absolute;
  z-index: 5;
  top: 0;
  right: 0;
  left: 0;
  height: 150px;
  overflow: hidden;
  border-bottom: solid 1px #000;
  box-shadow: 0 1px 50px rgba(0, 0, 0, 0.2);
  -webkit-app-region: drag;
}

header .header-bar {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 40px;
  z-index: 10;
  background-color: #222;
  border-bottom: solid 1px #000;
}

header .header-content {
  position: absolute;
  z-index: 6;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  padding-top: 30px;
}

header .header-bar {
  display: flex;
}

header .header-bar > div {
  flex: 0 1 50%;
}

header .header-bar > div:first-of-type {
  font-size: 14px;
  letter-spacing: 2px;
  padding: 14px 0 0 20px;
  opacity: 0.4;
  font-weight: 600;
}

header .header-bar > div:last-of-type {
  text-align: right;
}

header .header-bar > div:last-of-type > button {
  position: relative;
  z-index: 60;
  background-color: transparent;
  border: none;
  height: 40px;
  width: 40px;
  padding: 5px 0 0 0;
  line-height: 40px;
  transition: .2s;
  opacity: 0.6;
  cursor: pointer;
}

header .header-bar > div:last-of-type > button:hover {
  opacity: 1;
  background-color: #000;
}

header .header-bar > div:last-of-type > button img {
  height: 18px;
}

hr {
  background-color: #333;
  height: 1px;
  margin: 40px 30px;
  border: none;
}

.bg1 main,
.bg1 header .header-bg,
.bg2 main,
.bg2 header .header-bg,
.bg3 main,
.bg3 header .header-bg,
.bg4 main,
.bg4 header .header-bg,
.bg5 main,
.bg5 header .header-bg {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
}

.bg1 header .header-bg,
.bg2 header .header-bg,
.bg3 header .header-bg,
.bg4 header .header-bg,
.bg5 header .header-bg {
  filter: brightness(1.5);
  overflow: hidden;
  z-index: 5;
}

.bg1 main {
  background: url("http://xivdb.com/launcher/images/bg1.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg1 header .header-bg {
  background: url("http://xivdb.com/launcher/images/bg1_blur.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg2 main {
  background: url("http://xivdb.com/launcher/images/bg2.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg2 header .header-bg {
  background: url("http://xivdb.com/launcher/images/bg2_blur.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg3 main {
  background: url("http://xivdb.com/launcher/images/bg3.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg3 header .header-bg {
  background: url("http://xivdb.com/launcher/images/bg3_blur.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg4 main {
  background: url("http://xivdb.com/launcher/images/bg4.jpg") no-repeat center center fixed;
  background-size: cover;
}

.bg4 header .header-bg {
  background: url("http://xivdb.com/launcher/images/bg4_blur.jpg") no-repeat center center fixed;
  background-size: cover;
}

h1 {
  font-size: 32px;
  font-weight: 300;
  margin: 30px 0 0 30px;
}

h3 {
  margin: 0 0 15px 0;
  color: #fff1ab;
  font-size: 14px;
  font-weight: 300;
  letter-spacing: 5px;
  text-align: center;
}

a,
button,
input {
  outline: none;
  -webkit-app-region: no-drag;
}

label {
  display: block;
  margin-bottom: 5px;
}

form input[type="text"],
form input[type="password"] {
  outline: none;
  background-color: #fff;
  padding: 12px;
  border: none;
  border-radius: 3px;
  width: 100%;
  font-size: 16px;
  box-shadow: 0 1px 3px #000;
  text-shadow: none;
}

form button {
  outline: none;
  background-color: #458e0e;
  color: #fff;
  text-align: center;
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 3px;
  font-size: 16px;
  text-shadow: 0 1px 2px #000;
  cursor: pointer;
  box-shadow: 0 1px 3px #000;
  transition: .2s;
  font-weight: 400;
}

form button:hover {
  background-color: #2e6009;
}

form select {
  outline: none;
  background-color: #fff;
  padding: 12px;
  border: none;
  border-radius: 3px;
  width: 100%;
  font-size: 16px;
  box-shadow: 0 1px 3px #000;
  text-shadow: none;
}

> div {
  margin-bottom: 15px;
}

> .form-footer {
  margin-top: 50px;
}

.buttons-sprite-12 {
  background-image: url("http://xivdb.com/launcher/images/buttons.png");
  background-repeat: no-repeat;
  background-position: -710px center;
}

nav {
  display: flex;
}

nav .left {
  flex: 0 1 65%;
  display: flex;
}

nav .left > .logo {
  background-image: url("http://xivdb.com/launcher/images/logo_small.png");
  background-size: auto;
  background-position: center center;
  background-repeat: no-repeat;
  flex: 0 1 120px;
  width: 120px;
  height: 120px;
  display: block;
}

nav .left > button {
  height: 60px;
  margin: 30px 30px 0 0;
  background-color: transparent;
  border-radius: 3px;
  transition: .2s;
  padding: 0 20px;
  color: #fff1ab;
  font-size: 20px;
  font-weight: 300;
  border: none;
  cursor: pointer;
}

nav .left > button img {
  margin-top: 4px;
}

nav .left > button:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

nav .right {
  flex: 0 1 35%;
  text-align: right;
  display: flex;
  padding: 30px 15px 0 0;
}

nav .right .name {
  flex: 0 1 calc(100% - (64px  + 100px));
  margin: 12px 20px 0 0;
  font-size: 20px;
}

nav .right .name small {
  font-size: 13px;
  opacity: 0.6;
  display: block;
  margin-top: 5px;
}

nav .right .avatar {
  flex: 0 1 64px;
  text-align: center;
}

nav .right .avatar img {
  height: 64px;
  width: 64px;
  border-radius: 100px;
  box-shadow: 0 1px 3px #000;
}

nav .right .user-menu {
  flex: 0 1 100px;
  text-align: center;
}

nav .right .user-menu button {
  background-color: rgba(0, 0, 0, 0.3);
  border-radius: 3px;
  border: none;
  width: 42px;
  height: 42px;
  text-align: center;
  padding: 0;
  position: relative;
  margin: 10px 0 0 0;
  cursor: pointer;
  transition: .2s;
}

nav .right .user-menu button:hover {
  background-color: rgba(0, 0, 0, 0.6);
}

nav .right .user-menu button img {
  display: inline-block;
  margin: 0;
  position: absolute;
  top: 9px;
  left: 9px;
  width: 24px;
  height: 24px;
}

.login {
  position: absolute;
  z-index: 5;
  top: 180px;
  right: 100px;
  background-color: rgba(0, 0, 0, 0.5);
  border-radius: 5px;
  padding: 30px;
  width: 400px;
}

.expansion {
  position: absolute;
  left: 30px;
  bottom: 30px;
}

.debug {
  position: absolute;
  left: 10px;
  bottom: 10px;
  z-index: 3;
}

.debug select {
  padding: 4px;
  font-size: 14px;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/